<?php
/**
 * Created by PhpStorm.
 * User: pembr
 * Date: 19.08.2018
 * Time: 23:25
 */

namespace Telebot\Lib\Bot;

use DateTime;
use PDO;
use Telebot\Lib\Config\Config;
use Telebot\Lib\DB\Database;
use TelegramBot\Api\Client;
use Wkhooy\ObsceneCensorRus;

class Main
{

    private $db = null;

    protected $bot;
    protected $body;

    static protected $_adminStatus = ['creator', 'administrator'];
    static protected $_words = [
        '–¢—ã - –ø—Ä–∏–Ω—Ü, –≠–∫–ª–∏, –¥–µ—Ç–∫–∞', '–¢—ã - —É–∂–∞—Å, –ª–µ—Ç—è—â–∏–π –Ω–∞ –∫—Ä—ã–ª—å—è—Ö –Ω–æ—á–∏', '–¢—ã - —á–º–æ', '–¢—ã - –∏–Ω–∂–µ–Ω–µ—Ä –Ω–∞ —Å–æ—Ç–Ω—é —Ä—É–±–ª–µ–π', '–¢—ã –º–µ–Ω—è –±–µ—Å–∏—à—å', '–¢—ã –∑–∞–¥—Ä–æ—Ç –∏ –¥—Ä–∏—â. –¢—ã –¥–∞–∂–µ –∫–æ—Ç–∞ –æ—Ç–ø–∏–∑–¥–∏—Ç—å –Ω–µ —Å–º–æ–∂–µ—à—å', '–¢—ã - –ø—Ä–∏–Ω—Ü–µ—Å—Å–∞', '–¢—ã —Å—Ç–∞—Ä—ã–π', '–¢—ã –∂–∏—Ä–Ω—ã–π', '–¢—ã –±–æ–ª—å—à–æ–π –º–æ–ª–æ–¥–µ—Ü'
    ];
    static protected $_awesome = [
        '–ò —Ç—ã —ç—Ç–æ –≤—Å–µ —Å–∞–º —Å–¥–µ–ª–∞–ª! –ö–∞–∫–æ–π —Ç—ã –º–æ–ª–æ–¥–µ—Ü!', '–ò –ø–µ–Ω–∏—Å —É —Ç–µ–±—è –æ–≥—Ä–æ–º–Ω—ã–π', '–ö–∞–∫ –±—É–¥—Ç–æ –±—ã–ª–∏ —Å–æ–º–Ω–µ–Ω–∏—è', '–ù–æ –Ω–µ —Ç–∞–∫ –∫—Ä—É—Ç–æ, –∫–∞–∫ –∫—Ä—É—Ç —Ç—ã', '–¢—É–ø–æ', '–ö–∞–∫ –∑–∞–¥–Ω–∏—Ü–∞ –≤–æ–Ω —Ç–æ–π —á–∏–∫–∏', '–ú–æ–∂–Ω–æ –∏ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å', '–≠—Ç–æ –±—ã–ª —Ç—è–∂–µ–ª—ã–π –≥–æ–¥...', 'True story', '–ß—Ç–æ —Ç—ã –º–æ–∂–µ—à—å –∑–Ω–∞—Ç—å –æ –∫—Ä—É—Ç–æ—Å—Ç–∏?', '–ù–µ —Ç–æ —á—Ç–æ —Ç–≤–æ—è –∂–∏–∑–Ω—å', 'üòâ'
    ];
    static protected $_vacation = [
        '–û—Ç–ø—É—Å–∫ –¥–ª—è —Å–ª–∞–±–∞–∫–æ–≤!', '–ê —Ä–∞–±–æ—Ç–∞—Ç—å –∫—Ç–æ –±—É–¥–µ—Ç?', '–û–ø—è—Ç—å?', '–î–ª—è –æ—Ç–ø—É—Å–∫–∞ –Ω—É–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å!', '–î–∞–≤–∞–π, —Ä–∞—Å—Å–∫–∞–∂–∏ –∫–∞–∫ —Ç–µ–±–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–æ—Ä—è', '–ö—Ç–æ-—Ç–æ –Ω–æ–µ—Ç –ø—Ä–æ –æ—Ç–ø—É—Å–∫?', '–ú–æ–∂–Ω–æ –∏ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å, –Ω–æ –Ω–µ —Ç–µ–±–µ', '–û—Ç–ø—É—Å–∫ –ø—Ä–∏–¥—É–º–∞–ª–∏ –∫–∞–ø–∏—Ç–∞–ª–∏—Å—Ç—ã –≤ 85-–æ–º', '–†–∞–±–æ—Ç–∞—Ç—å!', '–ù–µ –≤ —ç—Ç–æ–π –∂–∏–∑–Ω–∏', '–•–≤–∞—Ç–∏—Ç –ø—Ä–æ—Ö–ª–∞–∂–¥–∞—Ç—å—Å—è', '–ì–æ—Å–ø–æ–¥–∏, –∑–∞–π–º–∏—Å—å —É–∂–µ –¥–µ–ª–æ–º'
    ];

    static protected $_commands = [
        '–∫—Ç–æ —è' => 'whoAmI',
        '–∫—Ç–æ —è?' => 'whoAmI',
        '—Ç—ã –∫—Ç–æ?' => 'whoAmI',
        '–∫—Ç–æ —Ç—ã?' => 'whoAmI',
        '–∫—Ç–æ —Å–≤–∞–ª–∏–ª' => 'whoLeft',
        '–∫—Ç–æ —è–≤–∏–ª—Å—è' => 'whoJoin',
        '–∞–¥–º–∏–Ω—ã' => 'whoAdmin',
        '–±–µ—Å–∫—É–ª—å—Ç—É—Ä—â–∏–Ω–∞' => 'whoTopBadWords'
    ];

    public function __construct()
    {
        $this->db = Database::getInstance();
        $this->bot = new Client(Config::get('token'));
        $this->body = json_decode($this->bot->getRawBody(), true);
    }

    public function index()
    {
        $bot = $this->bot;
        $body = $this->body;

        $this->checkUser($body['message']);

        $bot->command('start', function ($message) use ($bot) {
            $answer = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!';
            $bot->sendMessage($message->getChat()->getId(), $answer);
        });

        //–¥–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —é–∑–µ—Ä
        if (isset($body['message']['new_chat_member'])) {
            $this->userJoin($body['message']['new_chat_member']['id'], $body['message']['chat']['id'], $body['message']['new_chat_member']['username']);
            $user = "@" . $body['message']['new_chat_member']['username'];
            $bot->sendMessage($body['message']['chat']['id'], '–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ, –∫—Ç–æ —Å–æ–∏–∑–≤–æ–ª–∏–ª —è–≤–∏—Ç—å—Å—è. –ü—Ä–∏–≤–µ—Ç–∏–∫, ' . $user);
        }

        //—É–¥–∞–ª–µ–Ω —é–∑–µ—Ä
        if (isset($body['message']['left_chat_member'])) {
            $this->userLeft($body['message']['left_chat_member']['id'], $body['message']['chat']['id'], $body['message']['left_chat_member']['username']);
            $user = "@" . $body['message']['left_chat_member']['username'];
            $bot->sendMessage($body['message']['chat']['id'], '–ö—Ç–æ –∂–µ –Ω–∞—Å –ø–æ–∫–∏–Ω—É–ª? –ü–æ–∑–æ—Ä —Ç–µ–±–µ, ' . $user);
        }

//        ob_flush();
//        ob_start();
//        print_r($body);
//        file_put_contents('var_dump.txt', ob_get_flush(), FILE_APPEND);

        /**
         * [reply_to_message] => Array
            (
                [message_id] => 835
                [from] => Array
                (
                    [id] => 142413225
                    [is_bot] =>
                    [first_name] => pembrock
                    [username] => pembrock
                    [language_code] => ru
                )

                [chat] => Array
                (
                    [id] => -1001334371435
                    [title] => –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –º–µ–∂–≥–∞–ª–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–ø–≥ —Ä—Ç—Å —à—É—Ç–µ—Ä–∞
                    [type] => supergroup
                )

                [date] => 1534773791
                [text] => –Ω–∞–ø–∏—à–∏ —á–µ –Ω–∏—Ç—å
            )
         */

        /**
         * [reply_to_message] => Array
            (
                [message_id] => 763
                [from] => Array
                (
                    [id] => 142413225
                    [is_bot] =>
                    [first_name] => pembrock
                    [username] => pembrock
                    [language_code] => ru
                )

                [chat] => Array
                (
                    [id] => -1001334371435
                    [title] => –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –º–µ–∂–≥–∞–ª–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–ø–≥ —Ä—Ç—Å —à—É—Ç–µ—Ä–∞
                    [type] => supergroup
                )

                [date] => 1534768305
                [photo] => Array
                (
                    [0] => Array
                    (
                        [file_id] => AgADAgADkKkxG9BwoUvplXGlGyhEqsOxqw4ABBCbK_dONsT7VrMEAAEC
                        [file_size] => 1818
                        [width] => 84
                        [height] => 90
                    )

                    [1] => Array
                    (
                        [file_id] => AgADAgADkKkxG9BwoUvplXGlGyhEqsOxqw4ABEkWkpKocpUgV7MEAAEC
                        [file_size] => 14323
                        [width] => 252
                        [height] => 270
                    )

                )
            )
         */

        $message = mb_strtolower($body['message']['text']);

        if (!ObsceneCensorRus::isAllowed($message)) {
            $this->addBadWords($body['message']['from']['id'], $body['message']['chat']['id'], $body['message']['from']['username']);
        }

        if (isset(self::$_commands[$message])) {
            $text = $this->{self::$_commands[$message]}($body['message']['chat']['id']);
            $bot->sendMessage($body['message']['chat']['id'], $text, 'html', false, $body['message']['message_id']);
        }

        if ($message == 'ping') {
            $bot->sendMessage($body['message']['chat']['id'], "pong", 'html', false, $body['message']['message_id']);
//    $bot->sendMessage("@stop_tc3o_nagging", "test");
        }

//        if ($message == 'contact') {
//            $bot->sendContact($body['message']['chat']['id'], '8(977)777-66-55', 'Borak Obama');
//        }

        if (mb_strpos($message, '–æ—Ç–ø—É—Å–∫') !== false) {
            $bot->sendMessage($body['message']['chat']['id'], self::$_vacation[array_rand(self::$_vacation, 1)], null, false, $body['message']['message_id']);
        }

        if ($message == '–∫—Ä—É—Ç–æ') {
            $bot->sendMessage($body['message']['chat']['id'], self::$_awesome[array_rand(self::$_awesome, 1)], null, false, $body['message']['message_id']);
        }

        if ($message == '—Å—É–∫–∞') {
            $bot->sendMessage($body['message']['chat']['id'], '–ó–∞–ø—Ä—è–≥–∞–π –∫–æ–Ω–µ–π!', null, false, $body['message']['message_id']);
        }

        if ($message == 'test') {
            $bot->sendPhoto($body['message']['chat']['id'], 'AgADAgADkKkxG9BwoUvplXGlGyhEqsOxqw4ABBCbK_dONsT7VrMEAAEC');
        }
        //$update = $bot->getUpdates();
        //ob_flush();
        //ob_start();
        //print_r($update->update->message);
        //file_put_contents('var_dump.txt', ob_get_flush());

        $bot->run();
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Å username –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —á–∞—Ç–∞
     * @param $bot
     * @param $chatId
     * @return array
     */
    private function getAdministrators($chatId)
    {
        $admins = [];
        $administrators = $this->bot->getChatAdministrators($chatId);
        foreach($administrators as $admin) {
            if (in_array($admin->getStatus(), self::$_adminStatus)) {
                if (!$admin->getUser()->isBot()) {
                    $admins[] = $admin->getUser()->getUsername();
                }
            }
        }

        return $admins;
    }

    /**
     * –í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ —á–∞—Ç–∞
     * @param $chatId
     * @return string
     */
    public function whoAdmin($chatId)
    {
        $admins = $this->getAdministrators($chatId);
        $text = "<b>–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤:</b>\n\n";
        $index = 1;
        foreach ($admins as  $admin) {
            $text .= "{$index}. @{$admin}\n";
            $index++;
        }

        return $text;

    }

    public function whoAmI()
    {
        return self::$_words[array_rand(self::$_words, 1)];
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤ –±–∞–∑–µ, –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º
     * @param $body
     */
    private function checkUser($body)
    {
        $userId = $body['from']['id'];
        $username = $body['from']['username'];
        $userFirstName = $body['from']['first_name'];
        $languageCode = $body['from']['language_code'];
        $chatId = $body['chat']['id'];

        $query = $this->db->prepare( "SELECT user_id
			 FROM users
			 WHERE user_id = :user_id AND chat_id = :chat_id" );
        $query->execute(array('user_id' => $userId, 'chat_id' => $chatId));
        if( $query->rowCount() <= 0 ) {
            $statement = $this->db->prepare("INSERT INTO users (user_id, chat_id, username, first_name, language_code) VALUES (:user_id, :chat_id, :username, :first_name, :language_code)");
            $statement->execute(array(
                'user_id' => $userId,
                'chat_id' => $chatId,
                'username' => $username,
                'first_name' => $userFirstName,
                'language_code' => $languageCode
            ));
        }
    }

    /**
     * –ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –≤—ã—Ö–æ–¥–∏—Ç –∏–∑ —á–∞—Ç–∞, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –±–∞–∑—É. –ü—Ä–∏ —ç—Ç–æ–º, –µ—Å–ª–∏ –æ–Ω —É–∂–µ –≤—ã—Ö–æ–¥–∏–ª –∏–∑ —á–∞—Ç–∞ –¥–æ —ç—Ç–æ–≥–æ,
     * –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É
     * @param $userId
     * @param $chatId
     * @param $username
     */
    public function userLeft($userId, $chatId, $username)
    {
        $date = new DateTime();
        $query = $this->db->prepare("SELECT * FROM charts WHERE user_id = :user_id AND chat_id = :chat_id AND action_type = :action_type");
        $query->execute(array('user_id' => $userId, 'chat_id' => $chatId, 'action_type' => 'left'));
        if( $query->rowCount() > 0 ) {
            $statement = $this->db->prepare("UPDATE charts SET last_update = :last_update WHERE chat_id = :chat_id AND user_id = :user_id AND action_type = :action_type");
            $statement->execute(array(
                'chat_id' => $chatId,
                'user_id' => $userId,
                'action_type' => 'left',
                'last_update' => $date->format('Y-m-d H:i:s')
            ));
        } else {
            $statement = $this->db->prepare("INSERT INTO charts (chat_id, user_id, username, action_type, last_update) VALUES (:chat_id, :user_id, :username, :action_type, :last_update)");
            $statement->execute(array(
                'chat_id' => $chatId,
                'user_id' => $userId,
                'username' => $username,
                'action_type' => 'left',
                'last_update' => $date->format('Y-m-d H:i:s')
            ));
        }
    }

    /**
     * –ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è –∫ —á–∞—Ç—É, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –±–∞–∑—É. –ü—Ä–∏ —ç—Ç–æ–º, –µ—Å–ª–∏ –æ–Ω —É–∂–µ –±—ã–ª –≤ —ç—Ç–æ–º —á–∞—Ç–µ, –Ω–æ –≤—ã—Ö–æ–¥–∏–ª,
     * –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É
     * @param $userId
     * @param $chatId
     * @param $username
     */
    public function userJoin($userId, $chatId, $username)
    {
        $date = new DateTime();
        $query = $this->db->prepare("SELECT * FROM charts WHERE user_id = :user_id AND chat_id = :chat_id AND action_type = :action_type");
        $query->execute(array('user_id' => $userId, 'chat_id' => $chatId, 'action_type' => 'join'));
        if( $query->rowCount() > 0 ) {
            $statement = $this->db->prepare("UPDATE charts SET last_update = :last_update WHERE chat_id = :chat_id AND user_id = :user_id AND action_type = :action_type");
            $statement->execute(array(
                'chat_id' => $chatId,
                'user_id' => $userId,
                'action_type' => 'join',
                'last_update' => $date->format('Y-m-d H:i:s')
            ));
        } else {
            $statement = $this->db->prepare("INSERT INTO charts (chat_id, user_id, username, action_type, last_update) VALUES (:chat_id, :user_id, :username, :action_type, :last_update)");
            $statement->execute(array(
                'chat_id' => $chatId,
                'user_id' => $userId,
                'username' => $username,
                'action_type' => 'join',
                'last_update' => $date->format('Y-m-d H:i:s')
            ));
        }
    }

    /**
     * –í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 —á–µ–ª–æ–≤–µ–∫ –∑–∞—à–µ–¥—à–∏—Ö –≤ —á–∞—Ç
     * @param $chatId
     * @return string
     */
    public function whoLeft($chatId)
    {
        $text = "<b>–°–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ª–∏–≤–Ω—É–≤—à–∏—Ö:</b>\n\n";
        $query = $this->db->prepare( "SELECT username, last_update
			 FROM charts
			 WHERE action_type = :action_type AND chat_id = :chat_id ORDER BY last_update DESC LIMIT 10" );
        $query->execute(array('action_type' => 'left', 'chat_id' => $chatId));
        if( $query->rowCount() > 0 ) {
            $rows = $query->fetchAll(PDO::FETCH_ASSOC);
            $index = 1;
            foreach ($rows as  $row) {
                $text .= "{$index}. @{$row['username']} - {$row['last_update']}\n";
                $index++;
            }
        } else {
            $text .= "–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ª–∏–≤–Ω—É–ª. –ò–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.";
        }

        return $text;
    }

    /**
     * –í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 —á–µ–ª–æ–≤–µ–∫ –ø–æ–∫–∏–Ω—É–≤—à–∏—Ö —á–∞—Ç
     * @param $chatId
     * @return string
     */
    public function whoJoin($chatId)
    {
        $text = "<b>–°–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø—Ä–∏–ª—å–Ω—É–≤—à–∏—Ö:</b>\n\n";
        $query = $this->db->prepare( "SELECT username, last_update
			 FROM charts
			 WHERE action_type = :action_type AND chat_id = :chat_id ORDER BY last_update DESC LIMIT 10" );
        $query->execute(array('action_type' => 'join', 'chat_id' => $chatId));
        if( $query->rowCount() > 0 ) {
            $rows = $query->fetchAll(PDO::FETCH_ASSOC);
            $index = 1;
            foreach ($rows as  $row) {
                $text .= "{$index}. @{$row['username']} - {$row['last_update']}\n";
                $index++;
            }
        } else {
            $text .= "–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–∏—à–µ–ª.";
        }

        return $text;
    }

    /**
     * –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–ª–æ—Ö–∏—Ö —Å–ª–æ–≤
     * @param $userId
     * @param $chatId
     * @param $username
     */
    public function addBadWords($userId, $chatId, $username)
    {
        $date = new DateTime();
        $query = $this->db->prepare("SELECT * FROM charts WHERE user_id = :user_id AND chat_id = :chat_id AND action_type = :action_type");
        $query->execute(array('user_id' => $userId, 'chat_id' => $chatId, 'action_type' => 'badword'));
        if( $query->rowCount() > 0 ) {
            $row = $query->fetch(PDO::FETCH_ASSOC);
            $statement = $this->db->prepare("UPDATE charts SET last_update = :last_update, counter = :counter WHERE chat_id = :chat_id AND user_id = :user_id AND action_type = :action_type");
            $statement->execute(array(
                'chat_id' => $chatId,
                'user_id' => $userId,
                'action_type' => 'badword',
                'counter'   => $row['counter'] + 1,
                'last_update' => $date->format('Y-m-d H:i:s')
            ));
        } else {
            $statement = $this->db->prepare("INSERT INTO charts (chat_id, user_id, username, action_type, counter, last_update) VALUES (:chat_id, :user_id, :username, :action_type, :counter, :last_update)");
            $statement->execute(array(
                'chat_id' => $chatId,
                'user_id' => $userId,
                'username' => $username,
                'action_type' => 'badword',
                'counter' => 1,
                'last_update' => $date->format('Y-m-d H:i:s')
            ));
        }
    }


    /**
     * –í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ —Å–∞–º—ã—Ö —Å–∫–≤–µ—Ä–Ω–æ—Å–ª–æ–≤–Ω—ã—Ö
     * @param $chatId
     * @return string
     */
    public function whoTopBadWords($chatId)
    {
        $text = "<b>–°–ø–∏—Å–æ–∫ –≥–ª–∞–≤–Ω—ã—Ö —Å–∫–≤–µ—Ä–Ω–æ—Å–ª–æ–≤–æ–≤:</b>\n\n";
        $query = $this->db->prepare( "SELECT username, counter
			 FROM charts
			 WHERE action_type = :action_type AND chat_id = :chat_id AND counter > 0 ORDER BY counter DESC LIMIT 10" );
        $query->execute(array('action_type' => 'badword', 'chat_id' => $chatId));
        if( $query->rowCount() > 0 ) {
            $rows = $query->fetchAll(PDO::FETCH_ASSOC);
            $index = 1;
            foreach ($rows as  $row) {
                $text .= "{$index}. @{$row['username']} ({$row['counter']})\n";
                $index++;
            }
        } else {
            $text .= "–ü–æ–∫–∞ –≤—Å–µ –∫—É–ª—å—Ç—É—Ä–Ω—ã–µ.";
        }

        return $text;
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
     * @param $triggerName
     * @param $replyMessage
     */
    public function setBind($triggerName, $replyMessage)
    {
        
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞
     * @param $triggerName
     */
    public function unsetBind($triggerName)
    {

    }
}